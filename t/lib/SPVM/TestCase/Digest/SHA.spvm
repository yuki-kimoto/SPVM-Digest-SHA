class TestCase::Digest::SHA {
  use Fn;
  use Digest::SHA;
  use StringBuffer;

  static method sha1 : int() {
    # Exception
    {
      eval { Digest::SHA->sha1(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha1_hex : int() {
    # unicode.t
    {
      my $ok = 1;
      my $empty_unicode = "";
      my $ok_unicode = "";

      my $join_buffer = StringBuffer->new;
      for (my $i = 0; $i <= 255; $i++) { $join_buffer->push_char($i); }
      $ok_unicode = $join_buffer->to_string;

      my $input = [
        $empty_unicode . "abc",
        $ok_unicode
      ];

      my $out = [
        "a9993e364706816aba3e25717850c26c9cd0d89d",
        "4916d6bdb7f78e6803698cab32d1586ea457dfc8"
      ];

      for ( my $i = 0; $i < @$input; $i++) {
        unless ( Digest::SHA->sha1_hex($input->[$i]) eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha1_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha1_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "qZk+NkcGgWq6PiVxeFDCbJzQ2J0",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha1_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha1_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224 : int() {
    # Exception
    {
      eval { Digest::SHA->sha224(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha224_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "Iwl9IjQF2CKGQqR3vaJVsyqtvOS9oLP342ydpw"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha224_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha224_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256 : int() {
    # Exception
    {
      eval { Digest::SHA->sha256(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha256_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha256_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha256_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384 : int() {
    # Exception
    {
      eval { Digest::SHA->sha384(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha384_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP/W+2AhgcroefMI1i67KE0yCWn"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha384_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha384_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha512_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512224(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224_hex : int() {
    # fips180-4.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "4634270f707b6a54daae7530460842e20e37ed265ceee9a43e8924aa",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" => "23fec5bb94d60b23308192640b0c453335d664734fe40e7268674af9",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512224_hex($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512224_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512224_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512256(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256_hex : int() {
    # fips180-4.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "53048e2681941ef99b2e29b76b4c7dabe4c2d0c634fc6d46e0e2f13107e7af23",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" => "3928e184fb8690f840da3988121d31be65cb9d3ef83ee6146feac861e19b563a",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512256_hex($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512256_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512256_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha1(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1_hex : int() {
    # fips198.t
    {
      my $ok = 1;
      my $out = [
              "4f4ca3d5d68ba7cc0a1208c9c61e9c5da0403c0a",
              "0922d3405faa3d194f82a45830737d5cc6c75d24",
              "bcf41eab8bb2d802f3d05caf7cb092ecf8d1a3aa",
              "9ea886efe268dbecce420c7524df32e0751a2a26"
      ];

      my $data = [
               "Sample #1",
               "Sample #2",
               "Sample #3",
               "Sample #4"
      ];

      my $keys = ["","","",""];
      my $join_buffer = StringBuffer->new;

      for (my $i = 0x00; $i <= 0x3f; $i++) { $join_buffer->push_char($i); }
      $keys->[0] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x30; $i <= 0x43; $i++) { $join_buffer->push_char($i); }
      $keys->[1] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x50; $i <= 0xb3; $i++) { $join_buffer->push_char($i); }
      $keys->[2] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x70; $i <= 0xa0; $i++) { $join_buffer->push_char($i); }
      $keys->[3] = $join_buffer->to_string;

      for (my $i = 0; $i < @$keys; $i++) {
        unless ( Digest::SHA->hmac_sha1_hex($data->[$i], $keys->[$i]) eq $out->[$i] ) {
          $ok = 0;
        }
      }

      unless($ok) {
        return 0;
      }

    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha1_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha1_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha256(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256_hex : int() {
    # hmacsha.t
    {
      my $ok = 1;
      my $data = [
        "abc",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqabcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        "Hi There",
        "what do ya want for nothing?",
        Fn->repeat("\xdd", 50),
        Fn->repeat("\xcd", 50),
        "Test With Truncation",
        "Test Using Larger Than Block-Size Key - Hash Key First",
        "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
      ];

      my $join_buffer = StringBuffer->new;

      for (my $i = 1; $i <= 32; $i++) { $join_buffer->push_char($i); }
      my $k1 = $join_buffer->to_string;
      $join_buffer = StringBuffer->new;

      for (my $i = 1; $i <= 37; $i++) { $join_buffer->push_char($i); }
      my $k2 = $join_buffer->to_string;
      
      my $keys = [
        $k1,
        $k1,
        $k1,
        Fn->repeat("\x0b", 32),
        "Jefe",
        Fn->repeat("\xaa", 32),
        $k2,
        Fn->repeat("\x0c", 32),
        Fn->repeat("\xaa", 80),
        Fn->repeat("\xaa", 80)
      ];

      my $out = [
        "a21b1f5d4cf4f73a4dd939750f7a066a7f98cc131cb16a6692759021cfab8181",
        "104fdc1257328f08184ba73131c53caee698e36119421149ea8c712456697d30",
        "470305fc7e40fe34d3eeb3e773d95aab73acf0fd060447a5eb4595bf33a9d1a3",
        "198a607eb44bfbc69903a0f1cf2bbdc5ba0aa3f3d9ae3c1c7a3b1696a0b68cf7",
        "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843",
        "cdcb1220d1ecccea91e53aba3092f962e549fe6ce9ed7fdc43191fbde45c30b0",
        "d4633c17f6fb8d744c66dee0f8f074556ec4af55ef07998541468eb49bd2e917",
        "7546af01841fc09b1ab9c3749a5f1c17d4f589668a587b2700a9c97c1193cf42",
        "6953025ed96f0c09f80a96f78e6538dbe2e7b820e3dd970e7ddd39091b32352f",
        "6355ac22e890d0a3c8481a5ca4825bc884d3e7a1ff98a2fc2ac7d8e064c3b2e6"
      ];

      for (my $i = 0; $i < @$keys; $i++) {
        unless (Digest::SHA->hmac_sha256_hex($data->[$i], $keys->[$i]) eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # woodbury.t
    {
      my $ok = 1;
      my $input = [
        "Hi There",
        "what do ya want for nothing?",
        Fn->repeat("\xdd", 50),
        Fn->repeat("\xcd", 50),
        "Test With Truncation",
        "Test Using Larger Than Block-Size Key - Hash Key First",
        "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
      ];

      my $join_buffer = StringBuffer->new;
      for (my $i = 1; $i <= 25; $i++) { $join_buffer->push_char($i); }
      my $k1 = $join_buffer->to_string;

      my $key = [
        Fn->repeat("\x0b", 20),
        "Jefe",
        Fn->repeat("\xaa", 20),
        $k1,
        Fn->repeat("\x0c", 20),
        Fn->repeat("\xaa", 80),
        Fn->repeat("\xaa", 80)
      ];
      my $out = [
        "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7",
        "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843",
        "773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe",
        "82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b",
        "a3b6167473100ee06e0c796c2955552bfa6f7c0a6a8aef8b93f860aab0cd20c5",
        "6953025ed96f0c09f80a96f78e6538dbe2e7b820e3dd970e7ddd39091b32352f",
        "6355ac22e890d0a3c8481a5ca4825bc884d3e7a1ff98a2fc2ac7d8e064c3b2e6"
      ];
      for (my $i = 0; $i < @$input; $i++) {
        unless ( Digest::SHA->hmac_sha256_hex($input->[$i],$key->[$i]) eq $out->[$i] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha256_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha256_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha384(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384_hex : int() {
    # woodbury.t
    {
      my $ok = 1;
      my $input = [
        "Hi There",
        "what do ya want for nothing?",
        Fn->repeat("\xdd", 50),
        Fn->repeat("\xcd", 50),
        "Test With Truncation",
        "Test Using Larger Than Block-Size Key - Hash Key First",
        "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data. The Larger Block-Sizes Make For Much Longer Test Vectors"
      ];

      my $join_buffer = StringBuffer->new;
      for (my $i = 1; $i <= 25; $i++) { $join_buffer->push_char($i); }
      my $k1 = $join_buffer->to_string;

      my $key = [
        Fn->repeat("\x0b", 20),
        "Jefe",
        Fn->repeat("\xaa", 20),
        $k1,
        Fn->repeat("\x0c", 20),
        Fn->repeat("\xaa", 200),
        Fn->repeat("\xaa", 200)
      ];
      my $out = [
        "afd03944d84895626b0825f4ab46907f15f9dadbe4101ec682aa034c7cebc59cfaea9ea9076ede7f4af152e8b2fa9cb6",
        "af45d2e376484031617f78d2b58a6b1b9c7ef464f5a01b47e42ec3736322445e8e2240ca5e69e2c78b3239ecfab21649",
        "88062608d3e6ad8a0aa2ace014c8a86f0aa635d947ac9febe83ef4e55966144b2a5ab39dc13814b94e3ab6e101a34f27",
        "3e8a69b7783c25851933ab6290af6ca77a9981480850009cc5577c6e1f573b4e6801dd23c4a7d679ccf8a386c674cffb",
        "3abf34c3503b2a23a46efc619baef897f4c8e42c934ce55ccbae9740fcbc1af4ca62269e2a37cd88ba926341efe4aeea",
        "ec629fe0dc1fab504fc1c89572d6573cf15c3a4b5b69d53f0c13849561a6c13e153af48d2538ce056a3fe10d69da16c3",
        "07109d2c6c2fdcac39c3a8b5f36fc9a69e029d3d8647cc3e4ddb77888418c5c09d807942e5f96d17ee9fd46aed64b7f2"
      ];
      for (my $i = 0; $i < @$input; $i++) {
        unless ( Digest::SHA->hmac_sha384_hex($input->[$i],$key->[$i]) eq $out->[$i] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha384_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha384_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512_hex : int() {
    # woodbury.t
    {
      my $ok = 1;
      my $input = [
        "Hi There",
        "what do ya want for nothing?",
        Fn->repeat("\xdd", 50),
        Fn->repeat("\xcd", 50),
        "Test With Truncation",
        "Test Using Larger Than Block-Size Key - Hash Key First",
        "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data. The Larger Block-Sizes Make For Much Longer Test Vectors"
      ];

      my $join_buffer = StringBuffer->new;
      for (my $i = 1; $i <= 25; $i++) { $join_buffer->push_char($i); }
      my $k1 = $join_buffer->to_string;

      my $key = [
        Fn->repeat("\x0b", 20),
        "Jefe",
        Fn->repeat("\xaa", 20),
        $k1,
        Fn->repeat("\x0c", 20),
        Fn->repeat("\xaa", 200),
        Fn->repeat("\xaa", 200)
      ];
      my $out = [
        "87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cdedaa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854",
"164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea2505549758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737",
"fa73b0089d56a284efb0f0756c890be9b1b5dbdd8ee81a3655f83e33b2279d39bf3e848279a722c806b485a47e67c807b946a337bee8942674278859e13292fb",
"b0ba465637458c6990e5a8c5f61d4af7e576d97ff94b872de76f8050361ee3dba91ca5c11aa25eb4d679275cc5788063a5f19741120c4f2de2adebeb10a298dd",
"415fad6271580a531d4179bc891d87a650188707922a4fbb36663a1eb16da008711c5b50ddd0fc235084eb9d3364a1454fb2ef67cd1d29fe6773068ea266e96b",
"9dc6330f4c966b62b735d565343cb77413deccdf42a92d9ef5e4e2ae33f6c924bbc8e34c47111bc069482d4dbcfee148419a6547f2d01500e8160b39cc2e4ae8",
"396ed3a17cef82cddbd987ea66a5dd1f38b68167df31f049463b85fa10b531d0e90d1052f8c9c7cda263468ec3f980a8fec06213c2944c92a0ac95a2d8ade76d"
      ];
      for (my $i = 0; $i < @$input; $i++) {
        unless ( Digest::SHA->hmac_sha512_hex($input->[$i],$key->[$i]) eq $out->[$i] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha512_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method new : int() {
    {
      my $sha = Digest::SHA->new(1);

      unless ($sha is_type Digest::SHA) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->new(100); };
      unless (Fn->contains($@, "The SHA state cannot be initalized. The specified algorithm is 100.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  # Instance Methods
  static method add : int() {
    {
      my $ok = 1;
      my $input = "abc";
      my $sha = Digest::SHA->new(1);
      $sha->add($input);
      my $output = $sha->b64digest;
      unless ($output eq "qZk+NkcGgWq6PiVxeFDCbJzQ2J0") {
        $ok = 0;
      }
      unless($ok) {
        return 0;
      }
    }
    return 1;
  }

  # Instance Methods
  static method clone : int() {
    # my_clone.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 512;
      my $out = [
        "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f",
        "8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909",
        "e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973ebde0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b"
      ];

      for (my $i = 0; $i < @$input; $i++) {
        my $sha = Digest::SHA->new($alg);
        my $sha_clone = $sha->clone;
        if ($sha == $sha_clone) {
          $ok = 0;
        }
        $sha_clone->add($input->[$i]);
        unless ($sha_clone->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    return 1;
  }

  # Instance Methods
  static method hexdigest : int() {
    # my_sha1_oo.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 1;
      my $out = [
        "a9993e364706816aba3e25717850c26c9cd0d89d",
        "84983e441c3bd26ebaae4aa1f95129e5e54670f1",
        "34aa973cd4c4daa4f61eeb2bdbad27316534016f"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless ($sha->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # my_sha224_oo.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 224;
      my $out = [
        "23097d223405d8228642a477bda255b32aadbce4bda0b3f7e36c9da7",
        "75388b16512776cc5dba5da1fd890150b0c6455cb4f58b1952522525",
        "20794655980c91d8bbb4c1ea97618a4bf03f42581948b2ee4ee7ad67"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless ($sha->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # my_sha256_oo.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 256;
      my $out = [
        "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
        "248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1",
        "cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless ($sha->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # my_sha384_oo.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 384;
      my $out = [
        "cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed8086072ba1e7cc2358baeca134c825a7",
        "09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712fcc7c71a557e2db966c3e9fa91746039",
        "9d0e1809716474cb086e834e310a4a1ced149e9c00f248527972cec5704c2a5b07b8b3dc38ecc4ebae97ddd87f3d8985"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless ($sha->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # my_sha512_oo.t
    {
      my $ok = 1;
      my $input = [
        "abc",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu",
        Fn->repeat("a", 1000000)
      ];
      my $alg = 512;
      my $out = [
        "ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f",
        "8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909",
        "e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973ebde0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless ($sha->hexdigest eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # nistbyte.t
    {
      my $ok = 1;
      my $input = [
        "\x{24}",					# pack("B*", "00100100")
        "\x{70}\x{F0}",					# pack("B*", "0111000011110000")
        "\x{0E}\x{1E}\x{F0}",				# pack("B*", "000011100001111011110000")
        "\x{08}\x{38}\x{78}\x{8F}",				# pack("B*", "00001000001110000111100010001111")
        "\x{10}\x{3E}\x{08}\x{FC}\x{0F}",			# pack("B*", "0001000000111110000010001111110000001111")
        "\x{E7}\x{C7}\x{1E}\x{07}\x{EF}\x{03}",			# pack("B*", "111001111100011100011110000001111110111100000011")
        "\x{E0}\x{FB}\x{71}\x{F8}\x{F9}\x{C1}\x{FC}",		# pack("B*", "11100000111110110111000111111000111110011100000111111100")
        "\x{FF}\x{7C}\x{60}\x{3C}\x{1F}\x{80}\x{E2}\x{07}",		# pack("B*", "1111111101111100011000000011110000011111100000001110001000000111")
        "\x{F0}\x{3F}\x{C8}\x{60}\x{81}\x{FE}\x{01}\x{F8}\x{7F}",	# pack("B*", "111100000011111111001000011000001000000111111110000000011111100001111111")
      ];
      my $alg = 1;
      my $out = [
        "3CDF2936DA2FC556BFA533AB1EB59CE710AC80E5",
        "19C1E2048FA7393CFBF2D310AD8209EC11D996E5",
        "CA775D8C80FAA6F87FA62BECA6CA6089D63B56E5",
        "71AC973D0E4B50AE9E5043FF4D615381120A25A0",
        "A6B5B9F854CFB76701C3BDDBF374B3094EA49CBA",
        "D87A0EE74E4B9AD72E6847C87BDEEB3D07844380",
        "1976B8DD509FE66BF09C9A8D33534D4EF4F63BFD",
        "5A78F439B6DB845BB8A558E4CEB106CD7B7FF783",
        "F871BCE62436C1E280357416695EE2EF9B83695C"
      ];

      my $sha = Digest::SHA->new($alg);
      for (my $i = 0; $i < @$input; $i++) {
        $sha->add($input->[$i]);
        unless (Fn->uc($sha->hexdigest) eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    return 1;
  }

  # Instance Methods
  static method b64digest : int() {
    # my_base64_oo.t
    {
      my $ok = 1;
      my $input = "abc";
      my $alg = [1, 224, 256, 384, 512];
      my $out = [
        "qZk+NkcGgWq6PiVxeFDCbJzQ2J0",
        "Iwl9IjQF2CKGQqR3vaJVsyqtvOS9oLP342ydpw",
        "ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0",
        "ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP/W+2AhgcroefMI1i67KE0yCWn",
        "3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw"
      ];

      for (my $i = 0; $i < @$alg; $i++) {
        my $sha = Digest::SHA->new($alg->[$i]);
        $sha->add($input);
        unless ($sha->b64digest eq  $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    return 1;
  }
}

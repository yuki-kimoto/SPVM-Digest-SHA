class TestCase::Digest::SHA {
  use Fn;
  use Digest::SHA;
  use StringBuffer;

  static method sha1 : int() {
    # Exception
    {
      eval { Digest::SHA->sha1(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha1_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha1_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha1_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "qZk+NkcGgWq6PiVxeFDCbJzQ2J0",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha1_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha1_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224 : int() {
    # Exception
    {
      eval { Digest::SHA->sha224(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha224_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha224_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "Iwl9IjQF2CKGQqR3vaJVsyqtvOS9oLP342ydpw"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha224_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha224_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256 : int() {
    # Exception
    {
      eval { Digest::SHA->sha256(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha256_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha256_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha256_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha256_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384 : int() {
    # Exception
    {
      eval { Digest::SHA->sha384(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha384_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha384_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP/W+2AhgcroefMI1i67KE0yCWn"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha384_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha384_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512_hex : int() {
    # Exception
    {
      eval { Digest::SHA->sha512_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512_base64 : int() {
    # base64.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw"
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512_base64($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512224(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224_hex : int() {
    # fips180-4.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "4634270f707b6a54daae7530460842e20e37ed265ceee9a43e8924aa",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" => "23fec5bb94d60b23308192640b0c453335d664734fe40e7268674af9",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512224_hex($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512224_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512224_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512256(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256_hex : int() {
    # fips180-4.t
    {
      my $ok = 1;
      my $tests = [
        "abc" => "53048e2681941ef99b2e29b76b4c7dabe4c2d0c634fc6d46e0e2f13107e7af23",
        "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu" => "3928e184fb8690f840da3988121d31be65cb9d3ef83ee6146feac861e19b563a",
      ];
      for (my $i = 0; $i < @$tests; $i += 2) {
        unless ( Digest::SHA->sha512256_hex($tests->[$i]) eq $tests->[$i+1] ) {
          $ok = 0;
        }
      }
      unless ($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->sha512256_hex(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method sha512256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->sha512256_base64(undef); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha1(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1_hex : int() {
    # fips198.t
    {
      my $out = [
              "4f4ca3d5d68ba7cc0a1208c9c61e9c5da0403c0a",
              "0922d3405faa3d194f82a45830737d5cc6c75d24",
              "bcf41eab8bb2d802f3d05caf7cb092ecf8d1a3aa",
              "9ea886efe268dbecce420c7524df32e0751a2a26"
      ];

      my $data = [
               "Sample #1",
               "Sample #2",
               "Sample #3",
               "Sample #4"
      ];

      my $keys = ["","","",""];
      my $join_buffer = StringBuffer->new;

      for (my $i = 0x00; $i <= 0x3f; $i++) { $join_buffer->push_char($i); }
      $keys->[0] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x30; $i <= 0x43; $i++) { $join_buffer->push_char($i); }
      $keys->[1] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x50; $i <= 0xb3; $i++) { $join_buffer->push_char($i); }
      $keys->[2] = $join_buffer->to_string;

      $join_buffer = StringBuffer->new;
      for (my $i = 0x70; $i <= 0xa0; $i++) { $join_buffer->push_char($i); }
      $keys->[3] = $join_buffer->to_string;

      my $ok = 1;
      for (my $i = 0; $i < @$keys; $i++) {
        unless ( Digest::SHA->hmac_sha1_hex($data->[$i], $keys->[$i]) eq $out->[$i] ) {
          $ok = 0;
        }
      }

      unless($ok) {
        return 0;
      }

    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha1_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha1_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha1_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha224_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha256(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256_hex : int() {
    # hmacsha.t
    {
      my $data = [
        "abc",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        "abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopqabcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq",
        "Hi There",
        "what do ya want for nothing?",
        Fn->repeat("\xdd", 50),
        Fn->repeat("\xcd", 50),
        "Test With Truncation",
        "Test Using Larger Than Block-Size Key - Hash Key First",
        "Test Using Larger Than Block-Size Key and Larger Than One Block-Size Data"
      ];

      my $join_buffer = StringBuffer->new;

      for (my $i = 1; $i <= 32; $i++) { $join_buffer->push_char($i); }
      my $k1 = $join_buffer->to_string;
      $join_buffer = StringBuffer->new;

      for (my $i = 1; $i <= 37; $i++) { $join_buffer->push_char($i); }
      my $k2 = $join_buffer->to_string;
      
      my $keys = [
        $k1,
        $k1,
        $k1,
        Fn->repeat("\x0b", 32),
        "Jefe",
        Fn->repeat("\xaa", 32),
        $k2,
        Fn->repeat("\x0c", 32),
        Fn->repeat("\xaa", 80),
        Fn->repeat("\xaa", 80)
      ];

      my $out = [
        "a21b1f5d4cf4f73a4dd939750f7a066a7f98cc131cb16a6692759021cfab8181",
        "104fdc1257328f08184ba73131c53caee698e36119421149ea8c712456697d30",
        "470305fc7e40fe34d3eeb3e773d95aab73acf0fd060447a5eb4595bf33a9d1a3",
        "198a607eb44bfbc69903a0f1cf2bbdc5ba0aa3f3d9ae3c1c7a3b1696a0b68cf7",
        "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843",
        "cdcb1220d1ecccea91e53aba3092f962e549fe6ce9ed7fdc43191fbde45c30b0",
        "d4633c17f6fb8d744c66dee0f8f074556ec4af55ef07998541468eb49bd2e917",
        "7546af01841fc09b1ab9c3749a5f1c17d4f589668a587b2700a9c97c1193cf42",
        "6953025ed96f0c09f80a96f78e6538dbe2e7b820e3dd970e7ddd39091b32352f",
        "6355ac22e890d0a3c8481a5ca4825bc884d3e7a1ff98a2fc2ac7d8e064c3b2e6"
      ];

      my $ok = 1;
      for (my $i = 0; $i < @$keys; $i++) {
        unless (Digest::SHA->hmac_sha256_hex($data->[$i], $keys->[$i]) eq $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->hmac_sha256_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha256_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha384(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha384_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha384_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha384_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512224_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512224_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256_hex : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256_hex(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method hmac_sha512256_base64 : int() {
    # Exception
    {
      eval { Digest::SHA->hmac_sha512256_base64(undef,""); };
      unless (Fn->contains($@, "\$data must be defined.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  static method new : int() {
    {
      my $sha = Digest::SHA->new(1);

      unless ($sha is_type Digest::SHA) {
        return 0;
      }
    }
    # Exception
    {
      eval { Digest::SHA->new(100); };
      unless (Fn->contains($@, "The SHA state cannot be initalized. The specified algorithm is 100.")) {
        return 0;
      }
    }
    $@ = undef;
    return 1;
  }

  # Instance Methods
  static method add : int() {
    {
      my $input = "abc";
      my $sha = Digest::SHA->new(1);
      $sha->add($input);
      my $output = $sha->b64digest;
      unless ($output eq "qZk+NkcGgWq6PiVxeFDCbJzQ2J0") {
        return 0;
      }
    }
    return 1;
  }

  # Instance Methods
  static method b64digest : int() {
    # my_base64_oo.t
    {
      my $input = "abc";
      my $alg = [1, 224, 256, 384, 512];
      my $out = [
        "qZk+NkcGgWq6PiVxeFDCbJzQ2J0",
        "Iwl9IjQF2CKGQqR3vaJVsyqtvOS9oLP342ydpw",
        "ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0",
        "ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP/W+2AhgcroefMI1i67KE0yCWn",
        "3a81oZNherrMQXNJriBBMRLm+k6JqX6iCp7u5ktV05ohkpkqJ0/BqDa6PCOj/uu9RU1EI2Q86A4qmslPpUyknw"
      ];

      my $ok = 1;
      for (my $i = 0; $i < @$alg; $i++) {
        my $sha = Digest::SHA->new($alg->[$i]);
        $sha->add($input);
        unless ($sha->b64digest eq  $out->[$i]) {
          $ok = 0;
        }
      }
      unless($ok) {
        return 0;
      }
      return 1;
    }
  }
}
